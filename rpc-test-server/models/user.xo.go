// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// User represents a row from 'public.users'.
type User struct {
	ID         int64        `json:"id"`          // id
	UUID       string       `json:"uuid"`        // uuid
	NickName   string       `json:"nick_name"`   // nick_name
	Login      string       `json:"login"`       // login
	Password   string       `json:"password"`    // password
	Rule       int64        `json:"rule"`        // rule
	CreatedAt  time.Time    `json:"created_at"`  // created_at
	ModifiedAt pq.NullTime  `json:"modified_at"` // modified_at
	BlockedAt  pq.NullTime  `json:"blocked_at"`  // blocked_at
	Blocked    sql.NullBool `json:"blocked"`     // blocked

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.users (` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.UUID, u.NickName, u.Login, u.Password, u.Rule, u.CreatedAt, u.ModifiedAt, u.BlockedAt, u.Blocked)
	err = db.QueryRow(sqlstr, u.ID, u.UUID, u.NickName, u.Login, u.Password, u.Rule, u.CreatedAt, u.ModifiedAt, u.BlockedAt, u.Blocked).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE id = $10`

	// run query
	XOLog(sqlstr, u.UUID, u.NickName, u.Login, u.Password, u.Rule, u.CreatedAt, u.ModifiedAt, u.BlockedAt, u.Blocked, u.ID)
	_, err = db.Exec(sqlstr, u.UUID, u.NickName, u.Login, u.Password, u.Rule, u.CreatedAt, u.ModifiedAt, u.BlockedAt, u.Blocked, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.uuid, EXCLUDED.nick_name, EXCLUDED.login, EXCLUDED.password, EXCLUDED.rule, EXCLUDED.created_at, EXCLUDED.modified_at, EXCLUDED.blocked_at, EXCLUDED.blocked` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.UUID, u.NickName, u.Login, u.Password, u.Rule, u.CreatedAt, u.ModifiedAt, u.BlockedAt, u.Blocked)
	_, err = db.Exec(sqlstr, u.ID, u.UUID, u.NickName, u.Login, u.Password, u.Rule, u.CreatedAt, u.ModifiedAt, u.BlockedAt, u.Blocked)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_id_uindex'.
func UserByID(db XODB, id int64) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked ` +
		`FROM public.users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.UUID, &u.NickName, &u.Login, &u.Password, &u.Rule, &u.CreatedAt, &u.ModifiedAt, &u.BlockedAt, &u.Blocked)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByLogin retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_login_uindex'.
func UserByLogin(db XODB, login string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked ` +
		`FROM public.users ` +
		`WHERE login = $1`

	// run query
	XOLog(sqlstr, login)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, login).Scan(&u.ID, &u.UUID, &u.NickName, &u.Login, &u.Password, &u.Rule, &u.CreatedAt, &u.ModifiedAt, &u.BlockedAt, &u.Blocked)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByNickName retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_nick_name_uindex'.
func UserByNickName(db XODB, nickName string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked ` +
		`FROM public.users ` +
		`WHERE nick_name = $1`

	// run query
	XOLog(sqlstr, nickName)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, nickName).Scan(&u.ID, &u.UUID, &u.NickName, &u.Login, &u.Password, &u.Rule, &u.CreatedAt, &u.ModifiedAt, &u.BlockedAt, &u.Blocked)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pk'.
func UserByID(db XODB, id int64) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked ` +
		`FROM public.users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.UUID, &u.NickName, &u.Login, &u.Password, &u.Rule, &u.CreatedAt, &u.ModifiedAt, &u.BlockedAt, &u.Blocked)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByUUID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_uuid_uindex'.
func UserByUUID(db XODB, uuid string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, uuid, nick_name, login, password, rule, created_at, modified_at, blocked_at, blocked ` +
		`FROM public.users ` +
		`WHERE uuid = $1`

	// run query
	XOLog(sqlstr, uuid)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&u.ID, &u.UUID, &u.NickName, &u.Login, &u.Password, &u.Rule, &u.CreatedAt, &u.ModifiedAt, &u.BlockedAt, &u.Blocked)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
